import{c as X,d as Z,e as ee,f as te,g as ne,h as ae,i as re,j as ie,k as oe,m as se}from"./chunk-B4MQPMTZ.js";import{$a as R,A as f,Aa as x,Ab as A,Ba as P,Bb as j,Ca as Y,Cb as w,Db as T,Fa as _,H as M,N as o,Oa as v,Rb as I,Sb as E,T as y,Tb as U,Ub as z,Vb as q,Wb as W,Xa as k,Xb as L,Yb as V,Za as B,Zb as J,ba as m,ca as p,cb as F,da as l,db as N,ea as u,fa as b,ga as t,gc as $,ha as e,hc as Q,ia as S,ic as H,ja as C,la as O,lc as K,ma as g,xa as a,ya as c,z as h,zb as G}from"./chunk-CKVZYSXX.js";var ce=(i,r)=>r.id,me=(i,r)=>r.name;function pe(i,r){if(i&1){let n=C();t(0,"mat-list-item",12),O("click",function(){let D=h(n).$implicit,d=g();return f(d.scrollToFunction(D.id))}),t(1,"div",13)(2,"span",14),a(3),e()()(),S(4,"mat-divider")}if(i&2){let n=r.$implicit;o(3),c(n.name)}}function le(i,r){i&1&&(t(0,"mat-list-item")(1,"span",15),a(2,"No functions found"),e()())}function ue(i,r){if(i&1&&(t(0,"tr")(1,"td")(2,"code"),a(3),e()(),t(4,"td")(5,"code"),a(6),e()(),t(7,"td"),a(8),e()()),i&2){let n=r.$implicit;o(3),c(n.name),o(3),c(n.type),o(2),c(n.description||"-")}}function ge(i,r){if(i&1&&(t(0,"table",21)(1,"thead")(2,"tr")(3,"th"),a(4,"Name"),e(),t(5,"th"),a(6,"Type"),e(),t(7,"th"),a(8,"Description"),e()()(),t(9,"tbody"),l(10,ue,9,3,"tr",null,me),e()()),i&2){let n=g().$implicit;o(10),u(n.parameters)}}function De(i,r){i&1&&(t(0,"p",22),a(1,"No parameters"),e())}function he(i,r){if(i&1&&(t(0,"mat-card",10)(1,"mat-card-header",16)(2,"mat-card-title"),a(3),e()(),t(4,"mat-card-content")(5,"div",17)(6,"strong"),a(7,"Description: "),e(),t(8,"span"),a(9),e()(),t(10,"div",17)(11,"pre",18),a(12),e()(),t(13,"div",19)(14,"div",20),a(15,"Parameters"),e(),m(16,ge,12,0,"table",21)(17,De,2,0,"p",22),e(),t(18,"div",17)(19,"div",20),a(20,"Returns"),e(),t(21,"p")(22,"code"),a(23),e()()(),t(24,"div",17)(25,"div",20),a(26,"Example"),e(),t(27,"pre",23),a(28),e()()()()),i&2){let n=r.$implicit;b("id",n.id),o(3),c(n.name),o(6),c(n.description),o(3),c(n.code),o(4),p(n.parameters.length>0?16:17),o(7),c(n.returns),o(5),c(n.example)}}function fe(i,r){i&1&&(t(0,"div",11)(1,"mat-icon"),a(2,"search_off"),e(),t(3,"h2"),a(4,"No functions found"),e(),t(5,"p"),a(6,"Try adjusting your search query"),e()())}var de=class i{searchQuery=M("");functions=[{id:"ad2bs",name:"AD2BS",description:"Converts AD (Gregorian) date object or string to BS (Bikram Sambat) date object or formatted string.",code:"AD2BS(adDate: DateObject | string, sourceDateFormat?: string, returnDateFormat?: string): Promise<DateObject | string>",parameters:[{name:"adDate",type:"DateObject | string",description:"AD date as object {year, month, day} or string"},{name:"sourceDateFormat",type:"string",description:'Format of source date if string (e.g., "YYYY-MM-DD")'},{name:"returnDateFormat",type:"string",description:'Desired return format (e.g., "YYYY-MM-DD")'}],returns:"Date object or formatted string",example:`RtcNepaliDatepickerService.AD2BS({year: 2001, month: 6, day: 1}) 
// Returns: {year: 2058, month: 2, day: 19}

RtcNepaliDatepickerService.AD2BS("2001-06-01", "YYYY-MM-DD", "YYYY-MM-DD") 
// Returns: "2058-02-19"`},{id:"bs2ad",name:"BS2AD",description:"Converts BS (Bikram Sambat) date object or string to AD (Gregorian) date object or formatted string.",code:"BS2AD(bsDate: DateObject | string, sourceDateFormat?: string, returnDateFormat?: string): Promise<DateObject | string>",parameters:[{name:"bsDate",type:"DateObject | string",description:"BS date as object {year, month, day} or string"},{name:"sourceDateFormat",type:"string",description:'Format of source date if string (e.g., "YYYY-MM-DD")'},{name:"returnDateFormat",type:"string",description:'Desired return format (e.g., "YYYY-MM-DD")'}],returns:"Date object or formatted string",example:`RtcNepaliDatepickerService.BS2AD({year: 2058, month: 2, day: 19}) 
// Returns: {year: 2001, month: 6, day: 1}

RtcNepaliDatepickerService.BS2AD("2058-02-19", "YYYY-MM-DD", "YYYY-MM-DD") 
// Returns: "2001-06-01"`},{id:"convert-to-date-format",name:"ConvertToDateFormat",description:"Converts a date object or string to a formatted date string in the specified format. Supports various format patterns like YYYY-MM-DD, DD/MM/YYYY, etc.",code:"ConvertToDateFormat(dateObject: DateObject | string, returnFormat: string, sourceDateFormat?: string): Promise<string>",parameters:[{name:"dateObject",type:"DateObject | string",description:"Date object with {year, month, day} or date string"},{name:"returnFormat",type:"string",description:'Target format (e.g., "YYYY-MM-DD", "DD/MM/YYYY")'},{name:"sourceDateFormat",type:"string",description:'Format of source date if string (e.g., "YYYY-MM-DD")'}],returns:"Formatted date string",example:`RtcNepaliDatepickerService.ConvertToDateFormat({year: 2000, month: 1, day: 1}, "YYYY-MM-DD") 
// Returns: "2000-01-01"

RtcNepaliDatepickerService.ConvertToDateFormat("2058-02-19", "DD/MM/YYYY", "YYYY-MM-DD") 
// Returns: "19/02/2058"`},{id:"convert-to-date-object",name:"ConvertToDateObject",description:"Converts a date string to a date object format {year, month, day}. Parses the string according to the specified format.",code:"ConvertToDateObject(dateString: string, dateFormat: string): Promise<DateObject>",parameters:[{name:"dateString",type:"string",description:"Date as string"},{name:"dateFormat",type:"string",description:'Format of the date string (e.g., "YYYY-MM-DD")'}],returns:"Date object {year, month, day}",example:`RtcNepaliDatepickerService.ConvertToDateObject("2000-01-01", "YYYY-MM-DD") 
// Returns: {year: 2000, month: 1, day: 1}

RtcNepaliDatepickerService.ConvertToDateObject("19/02/2058", "DD/MM/YYYY") 
// Returns: {year: 2058, month: 2, day: 19}`},{id:"convert-to-number",name:"ConvertToNumber",description:"Converts Nepali unicode numbers (Devanagari digits) to standard numeric format. Useful for processing Nepali text input.",code:"ConvertToNumber(unicode: string): Promise<number>",parameters:[{name:"unicode",type:"string",description:"Nepali unicode number string"}],returns:"Number",example:`RtcNepaliDatepickerService.ConvertToNumber("\u0967\u0968\u0969\u096A\u096B\u096C\u096D\u096E\u096F") 
// Returns: 123456789

RtcNepaliDatepickerService.ConvertToNumber("\u0968\u0966\u096B\u096E") 
// Returns: 2058`},{id:"convert-to-unicode",name:"ConvertToUnicode",description:"Converts standard numbers to Nepali unicode (Devanagari digits). Useful for displaying numbers in Nepali format.",code:"ConvertToUnicode(number: number): Promise<string>",parameters:[{name:"number",type:"number",description:"Standard numeric value"}],returns:"Nepali unicode string",example:`RtcNepaliDatepickerService.ConvertToUnicode(123456789) 
// Returns: "\u0967\u0968\u0969\u096A\u096B\u096C\u096D\u096E\u096F"

RtcNepaliDatepickerService.ConvertToUnicode(2058) 
// Returns: "\u0968\u0966\u096B\u096E"`},{id:"number-to-words",name:"NumberToWords",description:"Converts numeric values to their English word representation. Supports both integer and decimal numbers, with optional currency formatting.",code:"NumberToWords(number: number, isCurrency: boolean): Promise<string>",parameters:[{name:"number",type:"number",description:"Numeric value to convert"},{name:"isCurrency",type:"boolean",description:"Indicates if the output should be in currency format"}],returns:"Number in English words",example:`RtcNepaliDatepickerService.NumberToWords(123456000.12, true) 
// Returns: "Twelve Crore Thirty Four Lakh Fifty Six Thousand Rupees and Twelve Paisa"

RtcNepaliDatepickerService.NumberToWords(1234, false) 
// Returns: "One Thousand Two Hundred Thirty Four"`},{id:"number-to-words-unicode",name:"NumberToWordsUnicode",description:"Converts numeric values to their Nepali word representation in Unicode format. Supports both integer and decimal numbers, with optional currency formatting.",code:"NumberToWordsUnicode(number: number, isCurrency: boolean): Promise<string>",parameters:[{name:"number",type:"number",description:"Numeric value to convert"},{name:"isCurrency",type:"boolean",description:"Indicates if the output should be in currency format"}],returns:"Unicode representation of number in Nepali words",example:`RtcNepaliDatepickerService.NumberToWordsUnicode(123456000.12, true) 
// Returns: "\u092C\u093E\u0939\u094D\u0930 \u0915\u0930\u094B\u0921 \u091A\u094C\u0924\u0940\u0938 \u0932\u093E\u0916 \u091B\u092A\u0928\u094D\u0928 \u0939\u091C\u093E\u0930 \u0930\u0941\u092A\u0948\u0902\u092F\u093E, \u092C\u093E\u0939\u094D\u0930 \u092A\u0948\u0938\u093E"

RtcNepaliDatepickerService.NumberToWordsUnicode(12, false) 
// Returns: "\u092C\u093E\u0939\u094D\u0930"`},{id:"parse-date",name:"ParseDate",description:"Parses a date string and returns it in object format {year, month, day} along with the detected format.",code:"ParseDate(dateString: string): Promise<{ parsedDate: DateObject; parsedFormat: string }>",parameters:[{name:"dateString",type:"string",description:"Any date string"}],returns:"Object containing parsed date and its format",example:`RtcNepaliDatepickerService.ParseDate("2000-01-01") 
// Returns: { parsedDate: { year: 2000, month: 1, day: 1 }, parsedFormat: "YYYY-MM-DD" }`},{id:"ad-dates-diff",name:"ADDatesDiff",description:"Calculates the number of days between two AD (Gregorian) dates.",code:"ADDatesDiff(startDate: DateObject | string, endDate: DateObject | string, dateFormat?: string): Promise<number>",parameters:[{name:"startDate",type:"DateObject | string",description:"Start AD date as object or string"},{name:"endDate",type:"DateObject | string",description:"End AD date as object or string"},{name:"dateFormat",type:"string",description:'Format of dates if provided as strings (e.g., "YYYY-MM-DD")'}],returns:"Number of days between the two AD dates",example:`RtcNepaliDatepickerService.ADDatesDiff({year: 2003, month: 5, day: 2}, {year: 2003, month: 8, day: 1}) 
// Returns: 91

RtcNepaliDatepickerService.ADDatesDiff("2003-05-02", "2003-08-01", "YYYY-MM-DD") 
// Returns: 91`},{id:"ad-get-current-date",name:"ADGetCurrentDate",description:"Returns the current AD (Gregorian) date as an object or formatted string.",code:"ADGetCurrentDate(returnFormat?: string): Promise<DateObject | string>",parameters:[{name:"returnFormat",type:"string",description:'Optional return format (e.g., "YYYY-MM-DD")'}],returns:"Current AD date object or formatted string",example:`RtcNepaliDatepickerService.ADGetCurrentDate() 
// Returns: {year: 2025, month: 10, day: 16}

RtcNepaliDatepickerService.ADGetCurrentDate("YYYY-MM-DD") 
// Returns: "2025-10-16"`},{id:"ad-get-current-day",name:"ADGetCurrentDay",description:"Returns the current day of the month in the AD (Gregorian) calendar.",code:"ADGetCurrentDay(): Promise<number>",parameters:[],returns:"Current AD day of the month",example:`RtcNepaliDatepickerService.ADGetCurrentDay() 
// Returns: 16 

// // if today is October 16, 2025`},{id:"ad-get-current-month",name:"ADGetCurrentMonth",description:"Returns the current month in the AD (Gregorian) calendar.",code:"ADGetCurrentMonth(): Promise<number>",parameters:[],returns:"Current AD month",example:`RtcNepaliDatepickerService.ADGetCurrentMonth() 
// Returns: 10 

// // if today is October 16, 2025`},{id:"ad-get-current-year",name:"ADGetCurrentYear",description:"Returns the current year in the AD (Gregorian) calendar.",code:"ADGetCurrentYear(): Promise<number>",parameters:[],returns:"Current AD year",example:`RtcNepaliDatepickerService.ADGetCurrentYear() 
// Returns: 2025 

// // if today is October 16, 2025`},{id:"ad-get-day",name:"ADGetDay",description:"Returns the day of the week for a given index (0-6) in the AD (Gregorian) calendar.",code:"ADGetDay(number: number): Promise<string | null>",parameters:[{name:"number",type:"number",description:"Day index (0 = Sunday, 6 = Saturday)"}],returns:"Day name or null if invalid index",example:`RtcNepaliDatepickerService.ADGetDay(0) 
// Returns: "Sunday"

RtcNepaliDatepickerService.ADGetDay(5) 
// Returns: "Friday"
RtcNepaliDatepickerService.ADGetDay(7) 
// Returns: null`},{id:"ad-get-days",name:"ADGetDays",description:"Returns an array of day names in the AD (Gregorian) calendar.",code:"ADGetDays(): Promise<string[]>",parameters:[],returns:"Array of day names",example:`RtcNepaliDatepickerService.ADGetDays() 
// Returns: ["Sunday", "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday"]`},{id:"ad-get-days-in-month",name:"ADGetDaysInMonth",description:"Returns the number of days in a given AD (Gregorian) year and month.",code:"ADGetDaysInMonth(year: number, month: number): Promise<number>",parameters:[{name:"year",type:"number",description:"Year in AD calendar"},{name:"month",type:"number",description:"Month in AD calendar (1-12)"}],returns:"Number of days in the specified month",example:`RtcNepaliDatepickerService.ADGetDaysInMonth(2015, 2) 
// Returns: 28

RtcNepaliDatepickerService.ADGetDaysInMonth(2020, 1) 
// Returns: 31`},{id:"ad-get-day-short",name:"ADGetDayShort",description:"Returns the short form of the day of the week for a given index (0-6) in the AD (Gregorian) calendar.",code:"ADGetDayShort(number: number): Promise<string | null>",parameters:[{name:"number",type:"number",description:"Day index (0 = Sunday, 6 = Saturday)"}],returns:"Short day name or null if invalid index",example:`RtcNepaliDatepickerService.ADGetDayShort(0) 
// Returns: "S"

RtcNepaliDatepickerService.ADGetDayShort(5) 
// Returns: "F"
RtcNepaliDatepickerService.ADGetDayShort(7) 
// Returns: null`},{id:"ad-get-days-short",name:"ADGetDaysShort",description:"Returns an array of short day names in the AD (Gregorian) calendar.",code:"ADGetDaysShort(): Promise<string[]>",parameters:[],returns:"Array of short day names",example:`RtcNepaliDatepickerService.ADGetDaysShort() 
// Returns: ["S", "M", "T", "W", "T", "F", "S"]`},{id:"ad-get-full-date",name:"ADGetFullDate",description:"Returns the full AD (Gregorian) date in a readable string format.",code:"ADGetFullDate(adDate: DateObject | string, dateFormat?: string): Promise<string>",parameters:[{name:"adDate",type:"DateObject | string",description:"AD date as object or string"},{name:"dateFormat",type:"string",description:'Format of date if provided as string (e.g., "YYYY-MM-DD")'}],returns:"Full AD date string",example:`RtcNepaliDatepickerService.ADGetFullDate({year: 2001, month: 3, day: 15}) 
// Returns: "15 March 2001"

RtcNepaliDatepickerService.ADGetFullDate("2003/05/02", "YYYY/MM/DD") 
// Returns: "2 May 2003"`},{id:"ad-get-full-day",name:"ADGetFullDay",description:"Returns the day of the week for a given AD (Gregorian) date.",code:"ADGetFullDay(adDate: DateObject | string, dateFormat?: string): Promise<string>",parameters:[{name:"adDate",type:"DateObject | string",description:"AD date as object or string"},{name:"dateFormat",type:"string",description:'Format of date if provided as string (e.g., "YYYY-MM-DD")'}],returns:"Day of the week",example:`RtcNepaliDatepickerService.ADGetFullDay({year: 2001, month: 3, day: 15}) 
// Returns: "Thursday"

RtcNepaliDatepickerService.ADGetFullDay("2003-05-02", "YYYY-MM-DD") 
// Returns: "Friday"`},{id:"ad-get-month",name:"ADGetMonth",description:"Returns the name of the AD (Gregorian) month for a given index (0-11).",code:"ADGetMonth(number: number): Promise<string | null>",parameters:[{name:"number",type:"number",description:"Month index (0 = January, 11 = December)"}],returns:"Month name or null if invalid index",example:`RtcNepaliDatepickerService.ADGetMonth(0) 
// Returns: "January"

RtcNepaliDatepickerService.ADGetMonth(5) 
// Returns: "June"
RtcNepaliDatepickerService.ADGetMonth(12) 
// Returns: null`},{id:"ad-get-months",name:"ADGetMonths",description:"Returns an array of month names in the AD (Gregorian) calendar.",code:"ADGetMonths(): Promise<string[]>",parameters:[],returns:"Array of month names",example:`RtcNepaliDatepickerService.ADGetMonths() 
// Returns: ["January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December"]`},{id:"bs-add-days",name:"BSAddDays",description:"Adds a specified number of days to a BS (Bikram Sambat) date and returns the resulting date.",code:"BSAddDays(bsDate: DateObject | string, noOfDays: number, dateFormat?: string): Promise<DateObject | string>",parameters:[{name:"bsDate",type:"DateObject | string",description:"BS date as object or string"},{name:"noOfDays",type:"number",description:"Number of days to add"},{name:"dateFormat",type:"string",description:'Format of date if provided as string (e.g., "YYYY-MM-DD")'}],returns:"BS date object or formatted string after adding days",example:`RtcNepaliDatepickerService.BSAddDays({year: 2001, month: 3, day: 15}, 2) 
// Returns: {year: 2001, month: 3, day: 17}

RtcNepaliDatepickerService.BSAddDays("2003-05-02", 90, "YYYY-MM-DD") 
// Returns: "2003-08-01"`},{id:"bs-dates-diff",name:"BSDatesDiff",description:"Calculates the number of days between two BS (Bikram Sambat) dates.",code:"BSDatesDiff(startDate: DateObject | string, endDate: DateObject | string, dateFormat?: string): Promise<number>",parameters:[{name:"startDate",type:"DateObject | string",description:"Start BS date as object or string"},{name:"endDate",type:"DateObject | string",description:"End BS date as object or string"},{name:"dateFormat",type:"string",description:'Format of dates if provided as strings (e.g., "YYYY-MM-DD")'}],returns:"Number of days between the two BS dates",example:`RtcNepaliDatepickerService.BSDatesDiff({year: 2001, month: 3, day: 15}, {year: 2001, month: 3, day: 17}) 
// Returns: 2

RtcNepaliDatepickerService.BSDatesDiff("2003-05-02", "2003-08-01", "YYYY-MM-DD") 
// Returns: 90`},{id:"bs-get-current-date",name:"BSGetCurrentDate",description:"Returns the current BS (Bikram Sambat) date as an object or formatted string.",code:"BSGetCurrentDate(returnFormat?: string): Promise<DateObject | string>",parameters:[{name:"returnFormat",type:"string",description:'Optional return format (e.g., "YYYY-MM-DD")'}],returns:"Current BS date object or formatted string",example:`RtcNepaliDatepickerService.BSGetCurrentDate() 
// Returns: {year: 2082, month: 6, day: 30} 

// // if today is October 16, 2025

RtcNepaliDatepickerService.BSGetCurrentDate("YYYY-MM-DD") 
// Returns: "2082-06-30"`},{id:"bs-get-current-day",name:"BSGetCurrentDay",description:"Returns the current day of the month in the BS (Bikram Sambat) calendar.",code:"BSGetCurrentDay(): Promise<number>",parameters:[],returns:"Current BS day of the month",example:`RtcNepaliDatepickerService.BSGetCurrentDay() 
// Returns: 30 

// // if today is 30 Ashoj 2082`},{id:"bs-get-current-month",name:"BSGetCurrentMonth",description:"Returns the current month in the BS (Bikram Sambat) calendar.",code:"BSGetCurrentMonth(): Promise<number>",parameters:[],returns:"Current BS month",example:`RtcNepaliDatepickerService.BSGetCurrentMonth() 
// Returns: 6 

// // if today is 30 Ashoj 2082`},{id:"bs-get-current-year",name:"BSGetCurrentYear",description:"Returns the current year in the BS (Bikram Sambat) calendar.",code:"BSGetCurrentYear(): Promise<number>",parameters:[],returns:"Current BS year",example:`RtcNepaliDatepickerService.BSGetCurrentYear() 
// Returns: 2082 

// // if today is 30 Ashoj 2082`},{id:"bs-get-day-in-unicode",name:"BSGetDayInUnicode",description:"Returns the BS (Bikram Sambat) day of the week in Unicode for a given index (0-6).",code:"BSGetDayInUnicode(number: number): Promise<string | null>",parameters:[{name:"number",type:"number",description:"Day index (0 = Sunday, 6 = Saturday)"}],returns:"Day name in Unicode or null if invalid index",example:`RtcNepaliDatepickerService.BSGetDayInUnicode(0) 
// Returns: "\u0906\u0907\u0924\u0935\u093E\u0930"

RtcNepaliDatepickerService.BSGetDayInUnicode(4) 
// Returns: "\u092C\u093F\u0939\u093F\u0935\u093E\u0930"
RtcNepaliDatepickerService.BSGetDayInUnicode(7) 
// Returns: null`},{id:"bs-get-days-in-unicode-short",name:"BSGetDaysInUnicodeShort",description:"Returns an array of short BS (Bikram Sambat) day names in Unicode.",code:"BSGetDaysInUnicodeShort(): Promise<string[]>",parameters:[],returns:"Array of short day names in Unicode",example:`RtcNepaliDatepickerService.BSGetDaysInUnicodeShort() 
// Returns: ["\u0906", "\u0938\u094B", "\u092E\u0902", "\u092C\u0941", "\u092C\u093F", "\u0936\u0941", "\u0936"]`},{id:"bs-get-days-in-month",name:"BSGetDaysInMonth",description:"Returns the number of days in a given BS (Bikram Sambat) year and month.",code:"BSGetDaysInMonth(year: number, month: number): Promise<number>",parameters:[{name:"year",type:"number",description:"Year in BS calendar"},{name:"month",type:"number",description:"Month in BS calendar (1-12)"}],returns:"Number of days in the specified month",example:`RtcNepaliDatepickerService.BSGetDaysInMonth(2015, 2) 
// Returns: 32

RtcNepaliDatepickerService.BSGetDaysInMonth(2020, 1) 
// Returns: 31`},{id:"bs-get-days-in-unicode",name:"BSGetDaysInUnicode",description:"Returns an array of BS (Bikram Sambat) day names in Unicode.",code:"BSGetDaysInUnicode(): Promise<string[]>",parameters:[],returns:"Array of day names in Unicode",example:`RtcNepaliDatepickerService.BSGetDaysInUnicode() 
// Returns: ["\u0906\u0907\u0924\u0935\u093E\u0930", "\u0938\u094B\u092E\u0935\u093E\u0930", "\u092E\u0919\u094D\u0917\u0932\u0935\u093E\u0930", "\u092C\u0941\u0927\u0935\u093E\u0930", "\u092C\u093F\u0939\u093F\u0935\u093E\u0930", "\u0936\u0941\u0915\u094D\u0930\u0935\u093E\u0930", "\u0936\u0928\u093F\u0935\u093E\u0930"]`},{id:"bs-get-day-in-unicode-short",name:"BSGetDayInUnicodeShort",description:"Returns the short BS (Bikram Sambat) day of the week in Unicode for a given index (0-6).",code:"BSGetDayInUnicodeShort(number: number): Promise<string | null>",parameters:[{name:"number",type:"number",description:"Day index (0 = Sunday, 6 = Saturday)"}],returns:"Short day name in Unicode or null if invalid index",example:`RtcNepaliDatepickerService.BSGetDayInUnicodeShort(0) 
// Returns: "\u0906"

RtcNepaliDatepickerService.BSGetDayInUnicodeShort(4) 
// Returns: "\u092C\u093F"
RtcNepaliDatepickerService.BSGetDayInUnicodeShort(7) 
// Returns: null`},{id:"bs-get-full-date",name:"BSGetFullDate",description:"Returns the full BS (Bikram Sambat) date in a readable string format, with optional Unicode output.",code:"BSGetFullDate(bsDate: DateObject | string, unicodeFlag: boolean, dateFormat?: string): Promise<string>",parameters:[{name:"bsDate",type:"DateObject | string",description:"BS date as object or string"},{name:"unicodeFlag",type:"boolean",description:"True to return date in Unicode, false for English"},{name:"dateFormat",type:"string",description:'Format of date if provided as string (e.g., "YYYY-MM-DD")'}],returns:"Full BS date string",example:`RtcNepaliDatepickerService.BSGetFullDate({year: 2075, month: 3, day: 15}, false) 
// Returns: "15 Ashar 2075"

RtcNepaliDatepickerService.BSGetFullDate("2075-03-15", true, "YYYY-MM-DD") 
// Returns: "\u0967\u096B \u0905\u0937\u093E\u0922 \u0968\u0966\u096D\u096B"`},{id:"bs-get-full-day",name:"BSGetFullDay",description:"Returns the day of the week for a given BS (Bikram Sambat) date in English.",code:"BSGetFullDay(bsDate: DateObject | string, dateFormat?: string): Promise<string>",parameters:[{name:"bsDate",type:"DateObject | string",description:"BS date as object or string"},{name:"dateFormat",type:"string",description:'Format of date if provided as string (e.g., "YYYY-MM-DD")'}],returns:"Day of the week in English",example:`RtcNepaliDatepickerService.BSGetFullDay({year: 2045, month: 3, day: 15}) 
// Returns: "Wednesday"

RtcNepaliDatepickerService.BSGetFullDay("2077-05-02", "YYYY-MM-DD") 
// Returns: "Tuesday"`},{id:"bs-get-full-day-in-unicode",name:"BSGetFullDayInUnicode",description:"Returns the day of the week for a given BS (Bikram Sambat) date in Unicode.",code:"BSGetFullDayInUnicode(bsDate: DateObject | string, dateFormat?: string): Promise<string>",parameters:[{name:"bsDate",type:"DateObject | string",description:"BS date as object or string"},{name:"dateFormat",type:"string",description:'Format of date if provided as string (e.g., "YYYY-MM-DD")'}],returns:"Day of the week in Unicode",example:`RtcNepaliDatepickerService.BSGetFullDayInUnicode({year: 2045, month: 3, day: 15}) 
// Returns: "\u092C\u0941\u0927\u0935\u093E\u0930"

RtcNepaliDatepickerService.BSGetFullDayInUnicode("2077-05-02", "YYYY-MM-DD") 
// Returns: "\u092E\u0919\u094D\u0917\u0932\u0935\u093E\u0930"`},{id:"bs-get-month",name:"BSGetMonth",description:"Returns the name of the BS (Bikram Sambat) month in English for a given index (0-11).",code:"BSGetMonth(number: number): Promise<string | null>",parameters:[{name:"number",type:"number",description:"Month index (0 = Baisakh, 11 = Chaitra)"}],returns:"Month name in English or null if invalid index",example:`RtcNepaliDatepickerService.BSGetMonth(0) 
// Returns: "Baisakh"

RtcNepaliDatepickerService.BSGetMonth(5) 
// Returns: "Ashoj"
RtcNepaliDatepickerService.BSGetMonth(12) 
// Returns: null`},{id:"bs-get-month-in-unicode",name:"BSGetMonthInUnicode",description:"Returns the name of the BS (Bikram Sambat) month in Unicode for a given index (0-11).",code:"BSGetMonthInUnicode(number: number): Promise<string | null>",parameters:[{name:"number",type:"number",description:"Month index (0 = Baisakh, 11 = Chaitra)"}],returns:"Month name in Unicode or null if invalid index",example:`RtcNepaliDatepickerService.BSGetMonthInUnicode(0) 
// Returns: "\u092C\u0948\u0936\u093E\u0916"

RtcNepaliDatepickerService.BSGetMonthInUnicode(5) 
// Returns: "\u0906\u0936\u094D\u0935\u093F\u0928"
RtcNepaliDatepickerService.BSGetMonthInUnicode(12) 
// Returns: null`},{id:"bs-get-months",name:"BSGetMonths",description:"Returns an array of BS (Bikram Sambat) month names in English.",code:"BSGetMonths(): Promise<string[]>",parameters:[],returns:"Array of month names in English",example:`RtcNepaliDatepickerService.BSGetMonths() 
// Returns: ["Baisakh", "Jestha", "Ashar", "Shrawan", "Bhadra", "Ashoj", "Kartik", "Mangsir", "Poush", "Magh", "Falgun", "Chaitra"]`},{id:"bs-get-months-in-unicode",name:"BSGetMonthsInUnicode",description:"Returns an array of BS (Bikram Sambat) month names in Unicode.",code:"BSGetMonthsInUnicode(): Promise<string[]>",parameters:[],returns:"Array of month names in Unicode",example:`RtcNepaliDatepickerService.BSGetMonthsInUnicode() 
// Returns: ["\u092C\u0948\u0936\u093E\u0916", "\u091C\u0947\u0920", "\u0905\u0937\u093E\u0922", "\u0936\u094D\u0930\u093E\u0935\u0923", "\u092D\u093E\u0926\u094D\u0930", "\u0906\u0936\u094D\u0935\u093F\u0928", "\u0915\u093E\u0930\u094D\u0924\u093F\u0915", "\u092E\u0919\u094D\u0938\u093F\u0930", "\u092A\u094C\u0937", "\u092E\u093E\u0918", "\u092B\u093E\u0932\u094D\u0917\u0941\u0928", "\u091A\u0948\u0924\u094D\u0930"]`},{id:"bs-is-between-dates",name:"BSIsBetweenDates",description:"Checks if a BS (Bikram Sambat) date is between two other BS dates.",code:"BSIsBetweenDates(checkDate: DateObject | string, startDate: DateObject | string, endDate: DateObject | string, dateFormat?: string, inclusive?: boolean): Promise<boolean>",parameters:[{name:"checkDate",type:"DateObject | string",description:"Date to check as object or string"},{name:"startDate",type:"DateObject | string",description:"Start date as object or string"},{name:"endDate",type:"DateObject | string",description:"End date as object or string"},{name:"dateFormat",type:"string",description:'Format of dates if provided as strings (e.g., "YYYY-MM-DD")'},{name:"inclusive",type:"boolean",description:"Whether to include start and end dates in the range"}],returns:"True if checkDate is between startDate and endDate",example:`RtcNepaliDatepickerService.BSIsBetweenDates({year: 2076, month: 2, day: 5}, {year: 2076, month: 1, day: 1}, {year: 2076, month: 2, day: 10}) 
// Returns: true

RtcNepaliDatepickerService.BSIsBetweenDates("2076-02-05", "2076-01-01", "2076-02-10", "YYYY-MM-DD") 
// Returns: true`},{id:"bs-is-equal-to",name:"BSIsEqualTo",description:"Checks if two BS (Bikram Sambat) dates are equal.",code:"BSIsEqualTo(date1: DateObject | string, date2: DateObject | string, dateFormat?: string): Promise<boolean>",parameters:[{name:"date1",type:"DateObject | string",description:"First BS date as object or string"},{name:"date2",type:"DateObject | string",description:"Second BS date as object or string"},{name:"dateFormat",type:"string",description:'Format of dates if provided as strings (e.g., "YYYY-MM-DD")'}],returns:"True if the dates are equal",example:`RtcNepaliDatepickerService.BSIsEqualTo({year: 2076, month: 1, day: 1}, {year: 2076, month: 1, day: 1}) 
// Returns: true

RtcNepaliDatepickerService.BSIsEqualTo("2076-01-01", "2076-01-01", "YYYY-MM-DD") 
// Returns: true`},{id:"bs-is-greater-than",name:"BSIsGreaterThan",description:"Checks if the first BS (Bikram Sambat) date is greater than the second.",code:"BSIsGreaterThan(date1: DateObject | string, date2: DateObject | string, dateFormat?: string): Promise<boolean>",parameters:[{name:"date1",type:"DateObject | string",description:"First BS date as object or string"},{name:"date2",type:"DateObject | string",description:"Second BS date as object or string"},{name:"dateFormat",type:"string",description:'Format of dates if provided as strings (e.g., "YYYY-MM-DD")'}],returns:"True if date1 is greater than date2",example:`RtcNepaliDatepickerService.BSIsGreaterThan({year: 2076, month: 2, day: 1}, {year: 2076, month: 1, day: 1}) 
// Returns: true

RtcNepaliDatepickerService.BSIsGreaterThan("2076-02-01", "2076-01-01", "YYYY-MM-DD") 
// Returns: true`},{id:"bs-is-greater-than-or-equal-to",name:"BSIsGreaterThanOrEqualTo",description:"Checks if the first BS (Bikram Sambat) date is greater than or equal to the second.",code:"BSIsGreaterThanOrEqualTo(date1: DateObject | string, date2: DateObject | string, dateFormat?: string): Promise<boolean>",parameters:[{name:"date1",type:"DateObject | string",description:"First BS date as object or string"},{name:"date2",type:"DateObject | string",description:"Second BS date as object or string"},{name:"dateFormat",type:"string",description:'Format of dates if provided as strings (e.g., "YYYY-MM-DD")'}],returns:"True if date1 is greater than or equal to date2",example:`RtcNepaliDatepickerService.BSIsGreaterThanOrEqualTo({year: 2076, month: 2, day: 1}, {year: 2076, month: 1, day: 1}) 
// Returns: true

RtcNepaliDatepickerService.BSIsGreaterThanOrEqualTo("2076-03-01", "2076-03-01", "YYYY-MM-DD") 
// Returns: true`},{id:"bs-is-less-than",name:"BSIsLessThan",description:"Checks if the first BS (Bikram Sambat) date is less than the second.",code:"BSIsLessThan(date1: DateObject | string, date2: DateObject | string, dateFormat?: string): Promise<boolean>",parameters:[{name:"date1",type:"DateObject | string",description:"First BS date as object or string"},{name:"date2",type:"DateObject | string",description:"Second BS date as object or string"},{name:"dateFormat",type:"string",description:'Format of dates if provided as strings (e.g., "YYYY-MM-DD")'}],returns:"True if date1 is less than date2",example:`RtcNepaliDatepickerService.BSIsLessThan({year: 2076, month: 1, day: 1}, {year: 2076, month: 2, day: 1}) 
// Returns: true

RtcNepaliDatepickerService.BSIsLessThan("2076-02-01", "2076-03-01", "YYYY-MM-DD") 
// Returns: true`},{id:"bs-is-less-than-or-equal-to",name:"BSIsLessThanOrEqualTo",description:"Checks if the first BS (Bikram Sambat) date is less than or equal to the second.",code:"BSIsLessThanOrEqualTo(date1: DateObject | string, date2: DateObject | string, dateFormat?: string): Promise<boolean>",parameters:[{name:"date1",type:"DateObject | string",description:"First BS date as object or string"},{name:"date2",type:"DateObject | string",description:"Second BS date as object or string"},{name:"dateFormat",type:"string",description:'Format of dates if provided as strings (e.g., "YYYY-MM-DD")'}],returns:"True if date1 is less than or equal to date2",example:`RtcNepaliDatepickerService.BSIsLessThanOrEqualTo({year: 2076, month: 1, day: 1}, {year: 2076, month: 2, day: 1}) 
// Returns: true

RtcNepaliDatepickerService.BSIsLessThanOrEqualTo("2076-03-01", "2076-03-01", "YYYY-MM-DD") 
// Returns: true`},{id:"bs-validate-date",name:"BSValidateDate",description:"Validates a BS (Bikram Sambat) date to ensure it is a valid date.",code:"BSValidateDate(bsDate: DateObject | string, dateFormat?: string): Promise<boolean>",parameters:[{name:"bsDate",type:"DateObject | string",description:"BS date as object or string"},{name:"dateFormat",type:"string",description:'Format of date if provided as string (e.g., "YYYY-MM-DD")'}],returns:"True if the date is valid",example:`RtcNepaliDatepickerService.BSValidateDate({year: 2000, month: 2, day: 30}) 
// Returns: true

RtcNepaliDatepickerService.BSValidateDate("2078-01-05", "YYYY-MM-DD") 
// Returns: true
RtcNepaliDatepickerService.BSValidateDate("2078-01-32", "YYYY-MM-DD") 
// Returns: false`}];filteredFunctions=_(()=>{let r=this.searchQuery().toLowerCase();return r?this.functions.filter(n=>n.name.toLowerCase().includes(r)||n.description.toLowerCase().includes(r)||n.category?.toLowerCase().includes(r)):this.functions});scrollToFunction(r,n=44){let s=document.getElementById(r);s&&(s.scrollIntoView({behavior:"smooth",block:"start"}),setTimeout(()=>{window.scrollBy({top:-n,left:0,behavior:"smooth"})},50))}apiSections=[{title:"Directive Properties",icon:"settings",description:"Properties that can be set on the nepaliDatepicker directive",items:[{name:"minDate",type:"string",description:"Minimum selectable date in YYYY-MM-DD format",example:'minDate="2080-01-01"',required:!1},{name:"maxDate",type:"string",description:"Maximum selectable date in YYYY-MM-DD format",example:'maxDate="2080-12-31"',required:!1},{name:"dateFormat",type:"string",description:"Format for displaying dates",example:'dateFormat="DD/MM/YYYY"',options:["YYYY-MM-DD","DD/MM/YYYY","MM/DD/YYYY","DD-MM-YYYY","YYYY/MM/DD"]},{name:"theme",type:"string",description:"Visual theme for the datepicker",example:'theme="material"',options:["default","material","bootstrap","custom"]},{name:"showTodayButton",type:"boolean",description:'Whether to show "Today" button',example:'[showTodayButton]="true"',default:"true"},{name:"showClearButton",type:"boolean",description:'Whether to show "Clear" button',example:'[showClearButton]="true"',default:"true"},{name:"autoClose",type:"boolean",description:"Automatically close after selection",example:'[autoClose]="true"',default:"true"},{name:"closeOnSelect",type:"boolean",description:"Close when a date is selected",example:'[closeOnSelect]="true"',default:"true"},{name:"disabledDays",type:"number[]",description:"Array of day numbers (0-6) to disable",example:'[disabledDays]="[0,6]"',note:"0 = Sunday, 6 = Saturday"}]},{title:"Events",icon:"event",description:"Events emitted by the nepaliDatepicker directive",items:[{name:"dateChange",type:"EventEmitter<string>",description:"When a date is changed",example:'(dateChange)="onDateChange($event)"',parameters:[{name:"event",type:"string",description:"Selected date in configured format"}]},{name:"dateSelect",type:"EventEmitter<DateObject>",description:"Full date object selected",example:'(dateSelect)="onDateSelect($event)"',parameters:[{name:"event",type:"DateObject",description:"Object with year, month, day"}]},{name:"dateClear",type:"EventEmitter<void>",description:"When date is cleared",example:'(dateClear)="onDateClear()"'}]},{title:"Conversion Functions",icon:"swap_horiz",description:"Functions for date conversion between BS and AD",items:[{name:"BS2AD",type:"function",description:"Convert BS to AD",example:'BS2AD("2080-10-15")',parameters:[{name:"bsDate",type:"string",description:"YYYY-MM-DD"}],returns:"string - AD date"},{name:"AD2BS",type:"function",description:"Convert AD to BS",example:'AD2BS("2024-01-15")',parameters:[{name:"adDate",type:"string",description:"YYYY-MM-DD"}],returns:"string - BS date"}]}];copyToClipboard(r){navigator.clipboard.writeText(r).then(()=>console.log("Code copied to clipboard"))}static \u0275fac=function(n){return new(n||i)};static \u0275cmp=y({type:i,selectors:[["app-documentation"]],decls:25,vars:3,consts:[[1,"home-container"],[1,"documentation-container",2,"margin-top","60px"],[1,"documentation-header"],[1,"page-title"],["mode","side","opened","",2,"margin-bottom","62px","margin-top","126px","position","fixed"],[1,"sidebar"],[1,"search-field"],["matInput","","placeholder","Type to search...",3,"ngModelChange","ngModel"],["matSuffix",""],[1,"content"],[1,"function-card",3,"id"],[1,"no-results-content"],[1,"function-item",3,"click"],[1,"function-list-content"],[1,"function-name"],[1,"no-results"],[2,"margin-bottom","6px"],[1,"section"],[1,"example-code",2,"padding","10px 16px"],[1,"section","mb-3"],[1,"fw-bold"],[1,"params-table"],[1,"no-params"],[1,"example-code"]],template:function(n,s){n&1&&(t(0,"div",0)(1,"div",1)(2,"div",2)(3,"h1",3)(4,"mat-icon"),a(5,"api"),e(),a(6," Documentation "),e()()()(),t(7,"mat-sidenav-container")(8,"mat-sidenav",4)(9,"div",5)(10,"mat-form-field",6)(11,"mat-label"),a(12,"Search functions"),e(),t(13,"input",7),Y("ngModelChange",function(d){return P(s.searchQuery,d)||(s.searchQuery=d),d}),e(),t(14,"mat-icon",8),a(15,"search"),e()(),t(16,"mat-nav-list"),l(17,pe,5,1,null,null,ce),m(19,le,3,0,"mat-list-item"),e()()(),t(20,"mat-sidenav-content")(21,"div",9),l(22,he,29,7,"mat-card",10,ce),m(24,fe,7,0,"div",11),e()()()),n&2&&(o(13),x("ngModel",s.searchQuery),o(4),u(s.filteredFunctions()),o(2),p(s.filteredFunctions().length===0?19:-1),o(3),u(s.filteredFunctions()),o(2),p(s.filteredFunctions().length===0?24:-1))},dependencies:[v,T,G,j,w,A,I,U,E,Q,H,Z,X,N,B,R,F,J,V,W,z,q,L,$,k,se,ae,te,ne,ee,oe,ie,re,K],styles:[".documentation-container[_ngcontent-%COMP%]{max-width:1200px;margin:0 auto;padding:0 24px}.documentation-header[_ngcontent-%COMP%]{text-align:center}.page-title[_ngcontent-%COMP%]{font-size:1.5rem;font-weight:300;display:flex;align-items:center;justify-content:center;gap:16px;color:#333}.page-subtitle[_ngcontent-%COMP%]{font-size:1.1rem;color:#666;margin:0 auto;line-height:1.6}.documentation-content[_ngcontent-%COMP%]{margin-bottom:40px}.api-section[_ngcontent-%COMP%]{margin-bottom:24px}.api-section[_ngcontent-%COMP%]   mat-expansion-panel-header[_ngcontent-%COMP%]{background-color:#f5f5f5}.api-section[_ngcontent-%COMP%]   mat-expansion-panel-header[_ngcontent-%COMP%]   mat-panel-title[_ngcontent-%COMP%]{display:flex;align-items:center;gap:12px;font-weight:500}.api-items[_ngcontent-%COMP%]{margin-top:24px}.api-item-card[_ngcontent-%COMP%]{margin-bottom:16px;transition:transform .3s ease,box-shadow .3s ease}.api-item-card[_ngcontent-%COMP%]:hover{transform:translateY(-2px);box-shadow:0 4px 20px #0000001a}.api-item-title[_ngcontent-%COMP%]{display:flex;align-items:center;gap:12px;flex-wrap:wrap}.api-item-title[_ngcontent-%COMP%]   .api-name[_ngcontent-%COMP%]{background-color:#e3f2fd;color:#1976d2;padding:4px 8px;border-radius:4px;font-family:Courier New,monospace;font-size:.9rem;font-weight:500}.api-item-title[_ngcontent-%COMP%]   .required-chip[_ngcontent-%COMP%]{background-color:#ffebee;color:#c62828;font-size:.75rem}.api-item-title[_ngcontent-%COMP%]   .default-chip[_ngcontent-%COMP%]{background-color:#e8f5e8;color:#2e7d32;font-size:.75rem}.api-type[_ngcontent-%COMP%]{font-family:Courier New,monospace;background-color:#f5f5f5;padding:2px 6px;border-radius:3px;font-size:.8rem;color:#666}.api-description[_ngcontent-%COMP%]{font-size:1rem;line-height:1.5;color:#333;margin-bottom:16px}.api-example[_ngcontent-%COMP%], .api-options[_ngcontent-%COMP%], .api-parameters[_ngcontent-%COMP%], .api-returns[_ngcontent-%COMP%], .api-note[_ngcontent-%COMP%]{margin-bottom:16px}.api-example[_ngcontent-%COMP%]   h4[_ngcontent-%COMP%], .api-options[_ngcontent-%COMP%]   h4[_ngcontent-%COMP%], .api-parameters[_ngcontent-%COMP%]   h4[_ngcontent-%COMP%], .api-returns[_ngcontent-%COMP%]   h4[_ngcontent-%COMP%], .api-note[_ngcontent-%COMP%]   h4[_ngcontent-%COMP%]{font-size:.9rem;font-weight:500;margin-bottom:8px;color:#555;text-transform:uppercase;letter-spacing:.5px}.code-block[_ngcontent-%COMP%]{position:relative;background-color:#f5f5f5;border-radius:8px;padding:16px;font-family:Courier New,monospace;font-size:.9rem;line-height:1.4;overflow-x:auto}.code-block[_ngcontent-%COMP%]   code[_ngcontent-%COMP%]{white-space:pre-wrap;word-break:break-word;display:block}.copy-button[_ngcontent-%COMP%]{position:absolute;top:8px;right:8px;opacity:.7;transition:opacity .3s ease}.copy-button[_ngcontent-%COMP%]:hover{opacity:1}.options-list[_ngcontent-%COMP%]{display:flex;flex-wrap:wrap;gap:8px}.options-list[_ngcontent-%COMP%]   .option-chip[_ngcontent-%COMP%]{background-color:#e3f2fd;color:#1976d2;font-size:.8rem}.parameters-list[_ngcontent-%COMP%]   .parameter-item[_ngcontent-%COMP%]{display:flex;align-items:center;gap:12px;margin-bottom:8px;padding:8px;background-color:#f8f9fa;border-radius:6px;border-left:3px solid #1976d2}.parameters-list[_ngcontent-%COMP%]   .parameter-item[_ngcontent-%COMP%]   .param-name[_ngcontent-%COMP%]{background-color:#e3f2fd;color:#1976d2;padding:2px 6px;border-radius:3px;font-family:Courier New,monospace;font-size:.8rem;font-weight:500;min-width:80px}.parameters-list[_ngcontent-%COMP%]   .parameter-item[_ngcontent-%COMP%]   .param-type[_ngcontent-%COMP%]{font-family:Courier New,monospace;background-color:#f5f5f5;padding:2px 6px;border-radius:3px;font-size:.75rem;color:#666;min-width:60px}.parameters-list[_ngcontent-%COMP%]   .parameter-item[_ngcontent-%COMP%]   .param-description[_ngcontent-%COMP%]{flex:1;font-size:.9rem;color:#555}.returns-text[_ngcontent-%COMP%], .note-text[_ngcontent-%COMP%]{font-size:.9rem;color:#555;line-height:1.4;margin:0}.usage-examples[_ngcontent-%COMP%]{margin-top:24px}.example-card[_ngcontent-%COMP%]{margin-bottom:24px;transition:transform .3s ease,box-shadow .3s ease}.example-card[_ngcontent-%COMP%]:hover{transform:translateY(-2px);box-shadow:0 4px 20px #0000001a}.dark-theme[_nghost-%COMP%]   .page-title[_ngcontent-%COMP%], .dark-theme   [_nghost-%COMP%]   .page-title[_ngcontent-%COMP%]{color:#fff}.dark-theme[_nghost-%COMP%]   .page-subtitle[_ngcontent-%COMP%], .dark-theme   [_nghost-%COMP%]   .page-subtitle[_ngcontent-%COMP%]{color:#ccc}.dark-theme[_nghost-%COMP%]   .api-section[_ngcontent-%COMP%]   mat-expansion-panel-header[_ngcontent-%COMP%], .dark-theme   [_nghost-%COMP%]   .api-section[_ngcontent-%COMP%]   mat-expansion-panel-header[_ngcontent-%COMP%]{background-color:#2d2d2d}.dark-theme[_nghost-%COMP%]   .api-description[_ngcontent-%COMP%], .dark-theme   [_nghost-%COMP%]   .api-description[_ngcontent-%COMP%]{color:#fff}.dark-theme[_nghost-%COMP%]   .api-example[_ngcontent-%COMP%]   h4[_ngcontent-%COMP%], .dark-theme   [_nghost-%COMP%]   .api-example[_ngcontent-%COMP%]   h4[_ngcontent-%COMP%], .dark-theme[_nghost-%COMP%]   .api-options[_ngcontent-%COMP%]   h4[_ngcontent-%COMP%], .dark-theme   [_nghost-%COMP%]   .api-options[_ngcontent-%COMP%]   h4[_ngcontent-%COMP%], .dark-theme[_nghost-%COMP%]   .api-parameters[_ngcontent-%COMP%]   h4[_ngcontent-%COMP%], .dark-theme   [_nghost-%COMP%]   .api-parameters[_ngcontent-%COMP%]   h4[_ngcontent-%COMP%], .dark-theme[_nghost-%COMP%]   .api-returns[_ngcontent-%COMP%]   h4[_ngcontent-%COMP%], .dark-theme   [_nghost-%COMP%]   .api-returns[_ngcontent-%COMP%]   h4[_ngcontent-%COMP%], .dark-theme[_nghost-%COMP%]   .api-note[_ngcontent-%COMP%]   h4[_ngcontent-%COMP%], .dark-theme   [_nghost-%COMP%]   .api-note[_ngcontent-%COMP%]   h4[_ngcontent-%COMP%]{color:#ccc}.dark-theme[_nghost-%COMP%]   .api-name[_ngcontent-%COMP%], .dark-theme   [_nghost-%COMP%]   .api-name[_ngcontent-%COMP%]{background-color:#1e3a8a;color:#64b5f6}.dark-theme[_nghost-%COMP%]   .api-type[_ngcontent-%COMP%], .dark-theme   [_nghost-%COMP%]   .api-type[_ngcontent-%COMP%]{background-color:#2d2d2d;color:#ccc}.dark-theme[_nghost-%COMP%]   .code-block[_ngcontent-%COMP%], .dark-theme   [_nghost-%COMP%]   .code-block[_ngcontent-%COMP%]{background-color:#1e1e1e;color:#f8f8f2}.dark-theme[_nghost-%COMP%]   .parameter-item[_ngcontent-%COMP%], .dark-theme   [_nghost-%COMP%]   .parameter-item[_ngcontent-%COMP%]{background-color:#2d2d2d;border-left-color:#64b5f6}.dark-theme[_nghost-%COMP%]   .parameter-item[_ngcontent-%COMP%]   .param-name[_ngcontent-%COMP%], .dark-theme   [_nghost-%COMP%]   .parameter-item[_ngcontent-%COMP%]   .param-name[_ngcontent-%COMP%]{background-color:#1e3a8a;color:#64b5f6}.dark-theme[_nghost-%COMP%]   .parameter-item[_ngcontent-%COMP%]   .param-type[_ngcontent-%COMP%], .dark-theme   [_nghost-%COMP%]   .parameter-item[_ngcontent-%COMP%]   .param-type[_ngcontent-%COMP%]{background-color:#2d2d2d;color:#ccc}.dark-theme[_nghost-%COMP%]   .parameter-item[_ngcontent-%COMP%]   .param-description[_ngcontent-%COMP%], .dark-theme   [_nghost-%COMP%]   .parameter-item[_ngcontent-%COMP%]   .param-description[_ngcontent-%COMP%]{color:#ccc}.dark-theme[_nghost-%COMP%]   .returns-text[_ngcontent-%COMP%], .dark-theme   [_nghost-%COMP%]   .returns-text[_ngcontent-%COMP%], .dark-theme[_nghost-%COMP%]   .note-text[_ngcontent-%COMP%], .dark-theme   [_nghost-%COMP%]   .note-text[_ngcontent-%COMP%]{color:#ccc}.dark-theme[_nghost-%COMP%]   .option-chip[_ngcontent-%COMP%], .dark-theme   [_nghost-%COMP%]   .option-chip[_ngcontent-%COMP%]{background-color:#1e3a8a;color:#64b5f6}@media (max-width: 768px){.documentation-container[_ngcontent-%COMP%]{padding:0 16px}.page-title[_ngcontent-%COMP%]{font-size:2rem;flex-direction:column;gap:8px}.api-item-title[_ngcontent-%COMP%], .parameter-item[_ngcontent-%COMP%]{flex-direction:column;align-items:flex-start;gap:8px}.parameter-item[_ngcontent-%COMP%]   .param-name[_ngcontent-%COMP%], .parameter-item[_ngcontent-%COMP%]   .param-type[_ngcontent-%COMP%]{min-width:auto}.options-list[_ngcontent-%COMP%]{justify-content:center}.code-block[_ngcontent-%COMP%]{padding:12px;font-size:.8rem}}@media (max-width: 480px){.page-title[_ngcontent-%COMP%]{font-size:1.5rem}.page-subtitle[_ngcontent-%COMP%]{font-size:1rem}.api-item-card[_ngcontent-%COMP%]{margin-bottom:12px}.parameter-item[_ngcontent-%COMP%]{padding:6px}}mat-toolbar[_ngcontent-%COMP%]{position:sticky;top:0;z-index:1000;box-shadow:0 2px 4px #0000001a}mat-sidenav[_ngcontent-%COMP%]{width:300px;border-right:1px solid #e0e0e0}.sidebar[_ngcontent-%COMP%]{height:100%;display:flex;flex-direction:column}.search-field[_ngcontent-%COMP%]{width:100%;padding:16px;box-sizing:border-box}mat-nav-list[_ngcontent-%COMP%]{flex:1;overflow-y:auto}.function-item[_ngcontent-%COMP%]{cursor:pointer;transition:background-color .2s;height:38px}.function-item[_ngcontent-%COMP%]:hover{background-color:#f5f5f5}.function-list-content[_ngcontent-%COMP%]{display:flex;flex-direction:column;gap:4px;width:100%}.function-name[_ngcontent-%COMP%]{font-weight:500;font-size:14px;color:#1976d2}.function-category[_ngcontent-%COMP%]{font-size:12px;color:#666}.no-results[_ngcontent-%COMP%]{color:#999;font-style:italic}.home-container[_ngcontent-%COMP%]{max-width:1400px;margin:0 auto;padding:0 24px}.content[_ngcontent-%COMP%]{padding:24px;overflow-y:auto;height:100%;background-color:#fafafa}.function-card[_ngcontent-%COMP%]{margin-bottom:24px;scroll-margin-top:24px}mat-card-header[_ngcontent-%COMP%]{margin-bottom:16px}mat-card-title[_ngcontent-%COMP%]{font-size:24px;font-weight:600;color:#1976d2}mat-card-subtitle[_ngcontent-%COMP%]{font-size:14px;margin-top:4px}.section[_ngcontent-%COMP%]{margin-bottom:8px}.section[_ngcontent-%COMP%]:last-child{margin-bottom:0}.section[_ngcontent-%COMP%]   h3[_ngcontent-%COMP%]{font-size:16px;font-weight:600;color:#333;margin:0 0 12px}.section[_ngcontent-%COMP%]   p[_ngcontent-%COMP%]{margin:0;line-height:1.6;color:#555}.params-table[_ngcontent-%COMP%]{width:100%;border-collapse:collapse;margin-top:8px;font-family:Arial,sans-serif;font-size:16px}.params-table[_ngcontent-%COMP%]   th[_ngcontent-%COMP%], .params-table[_ngcontent-%COMP%]   td[_ngcontent-%COMP%]{border:1px solid #ddd;padding:8px;text-align:left}.params-table[_ngcontent-%COMP%]   th[_ngcontent-%COMP%]{font-weight:600;font-size:15px}.params-table[_ngcontent-%COMP%]   code[_ngcontent-%COMP%]{background-color:#f2f2f2;padding:2px 4px;border-radius:3px;font-size:13px}.no-params[_ngcontent-%COMP%]{font-style:italic;color:#666;margin-top:8px}.example-code[_ngcontent-%COMP%]{background-color:#263238;color:#aed581;padding:16px;border-radius:4px;overflow-x:auto;font-size:14px;line-height:1.5;margin:0;white-space:pre-wrap;word-break:break-all}.no-results-content[_ngcontent-%COMP%]{display:flex;flex-direction:column;align-items:center;justify-content:center;height:50vh;color:#999}.no-results-content[_ngcontent-%COMP%]   mat-icon[_ngcontent-%COMP%]{font-size:64px;width:64px;height:64px;margin-bottom:16px}.no-results-content[_ngcontent-%COMP%]   h2[_ngcontent-%COMP%]{margin:0 0 8px;font-size:24px}.no-results-content[_ngcontent-%COMP%]   p[_ngcontent-%COMP%]{margin:0;font-size:16px}@media (max-width: 768px){mat-sidenav[_ngcontent-%COMP%]{width:250px}.content[_ngcontent-%COMP%]{padding:16px}.function-card[_ngcontent-%COMP%]{margin-bottom:16px}}"]})};export{de as DocumentationComponent};
